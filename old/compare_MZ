from TGProcess import *
import os
import sys
import time

##if len(sys.argv) < 3:
##    exit("Usage: python compare.py /Path/To/File.TextGrid1 /Path/ToFile.TextGrid2")
##filepath1 = os.path.abspath(sys.argv[1])
##filepath2 = os.path.abspath(sys.argv[2])
filepath1 = "C:\Users\mzhan\Downloads\Conv7_amh_5-1.textgrid"
filepath2 = "C:\Users\mzhan\Documents\UROP2012winter-spring\yinmon07g_lm_predicted.textgrid"
t1 = TextGrid(filepath=filepath1)
t2 = TextGrid(filepath=filepath2)

#TODO: Allow user to set
t1TierIndex = 1
t2TierIndex = 1

#TODO: Decide values
#Temporal Mutations Thresholds
diffThresholds = {} #Custom thresholds.  Eg = {'t': 0.010, 'k-cl': 0.00}
defaultDiff = 0.000 #Default threshold for landmarks not listed in diffThresholds

def parenEqual(a,b):
    #This may return an incorrect result in the case of a/(b)/b/c, because of the semi-parenthesised pair.
    #However, that will not occur in our data.
    if a == b:
        return True #To save time.
    
    la = a.split("/")
    lb = b.split("/")
    while la:
        if not lb:
            return False #Not enough entries
        if "(" in lb[0] or ")" in lb[0]:
            if lb[0].strip("()") == la[0]:
                #Paren'd entry should have been there.
                la = la[1:]
            #else paren'd entry shouldn't have been there, but we let it slide.
            lb = lb[1:]
        else:
            if lb[0] == la[0]:
                #Non paren'd entry matches.
                la = la[1:]
                lb = lb[1:]
            else:
                #Non paren'd entry doesn't match.  Say they're not equal!
                return False
    for itemLeft in lb:
        if "(" not in itemLeft:
            #Non paren'd entry, but no template entries left to match it with.  They're unequal!
            return False
    return True
                
                
                
def align(l1,l2):
    '''Modified implementation of Needleman-Wunsch algorithm, seen at http://en.wikipedia.org/wiki/Needleman-Wunsch_algorithm.
    Minimizes cost of deletions, insertions of mutations, where all three are weighted equally undesirably.
    NOTE: Only works with TGProcess.Point objects, as it relies on the Point.mark attribute.'''
    start = time.time()
    
    D = 1 #Cost of a deletion or insertion
    M = 1 #Cost of a mutation
    PI = 0.5 #Cost of inserting a parenthesized item
    #TODO: Would it ever be useful to assign a (+ or -) cost C to a correct match?  I'll need to think about this.
    
    #Strange reverse ordering of n and m, but I'm keeping it this way to stay consistent with Wikipedia. :)
    n = len(l1)
    m = len(l2)

    #F[j][i] is the minimum cost of aligning the first i points in l1 with the first j points in l2.
    #(This includes the numerous deletions or insertions that arise if i != j.)
    F = [[D*j] for j in range(0,m+1)] #Generate basis column
    F[0] = [D*i for i in range(0,n+1)] #Generate basis row

    lastProgressLevel = 0
    for j in range(1,m+1):
        #Extremely ugly progress printouts. :)
        progress = round(100.0*j/m)
        if progress != lastProgressLevel:
            lastProgressLevel = progress
            print("Progress: " + str(progress) + "%")
            
        for i in range(1,n+1):
            #Determine cost of getting to this point via del, ins, or mut
            #TODO: How to deal with deletions when we assume template is infallible?
            #Assign Insertion cost = 1, Deletion cost = infinite?
            deletion = F[j][i-1] + D
            if "(" in l2[j-1].mark or ")" in l2[j-1].mark:
                insertion = F[j-1][i] + PI
            else:
                insertion = F[j-1][i] + D

            mutation = F[j-1][i-1] + M*(not parenEqual(l1[i-1].mark,l2[j-1].mark))
            #firstTen1[i-1] is the mark that correstponds to the CURRENT column
            #This strangeness is a result of the basis offsets.
            F[j].append(min([deletion, insertion, mutation]))

    #Fun stats:
    insertionCount = 0
    deletionCount = 0
    mutationCount = 0
    noChangeCount = 0

    #Aligned lists, with None values inserted to align the lists.
    aligned1 = []
    aligned2 = []

    '''Keep track of what modifications happen, where.  Elements will be:
    "ins":     insertion
    "del":     deletion
    "time":    temporal mutation
    "mut":     landmark mutation, NOT accompanied by temporal mutatation
    "timemut": landmark mutation AND temporal mutation
    "---":     exact match, both between point landmarks and point times.'''
    alterTypes = []

    #Time diffs:
    #Not including a time diffs tier.  Adds no extra info, as the diff can be caluculated \
    #from subtracting the times of a Point from aligned1 and a Point from aligned2.

    

    (j,i) = (m,n) #"Bottom-right"
    while (j,i) != (0,0):
        if F[j-1][i] + D == F[j][i]:
            #Insertion of element in l2 that doesn't exist in l1.
            insertionCount+= 1
            alterTypes = ["ins"] + alterTypes
            aligned1 = [None] + aligned1
            aligned2 = [l2[j-1]] + aligned2
            (j,i) = (j-1,i)
            
        elif F[j][i-1] + D == F[j][i]:
            #Deleted elements exists in l1 but not l2.
            deletionCount += 1
            alterTypes = ["del"] + alterTypes 
            aligned1 = [l1[i-1]] + aligned1
            aligned2 = [None] + aligned2
            (j,i) = (j,i-1)
            
        elif l1[i-1].mark == l2[j-1].mark and (F[j-1][i-1] == F[j][i]):
            #No change.  Element in l2 is same as in l1.
            noChangeCount += 1
            aligned1 = [l1[i-1]] + aligned1
            aligned2 = [l2[j-1]] + aligned2
            
            #Time diff.  We could return it as part of the output,
            #and/or use it to identify "temporal mutations." But, I don't
            #have enough test data to figure out what to do with it, yet, so it remains commented:
            timeDiff = abs(float(l1[i-1].time)-float(l2[j-1].time))
            if timeDiff > diffThresholds.get(l1[i-1].mark,defaultDiff):
                #Temporal mutation
                alterTypes = ["time"] + alterTypes
            else:
                alterTypes = ["---"] + alterTypes
                
            (j,i) = (j-1,i-1)

        elif l1[i-1].mark != l2[j-1].mark and (F[j-1][i-1]+M == F[j][i]):
            #Mutation. Element in l2 is different from element in l1.
            mutationCount += 1
            alterTypes = ["mut"] + alterTypes
            aligned1 = [l1[i-1]] + aligned1
            aligned2 = [l2[j-1]] + aligned2
            timeDiff = abs(float(l1[i-1].time)-float(l2[j-1].time))
            #Use l1, as we'd care about the position of the *correct* landmark.
            if timeDiff >= diffThresholds.get(l1[i-1].mark,defaultDiff):
                alterTypes = ["timemut"] + alterTypes
            else:
                alterTypes = ["mut"] + alterTypes
            (j,i) = (j-1,i-1)
            
        else:
            raise Exception("An unexpected error occured: No insertion, deletion or mutation occurred, but it wasn't unchanged!")
    
    print("\nThe smallest possible number of alterations is " + str(F[m][n]) + ":")
    print("   " + str(insertionCount) + " insertions,")
    print("   " + str(deletionCount) + " deletions, and")
    print("   " + str(mutationCount) + " mutations.")
    print("Alignment took " + str(time.time()-start) + " seconds. \n")
    return (aligned1,aligned2,alterTypes)

#Align the landmark tiers from the two TextGrids
(aligned1, aligned2, alterTypes) = align(t1[1],t2[1])
for x in range(0,len(alterTypes)):
    alterType = str(alterTypes[x])
    
    #Verbose output:
    #print(str(aligned1[x]).ljust(30) + str(aligned2[x]).ljust(30) + alterType)
    
    #Only alterations:
    if alterType == "ins":
        print(str(aligned2[x]).ljust(27) + " inserted")
    elif alterType == "del":
        print(str(aligned1[x]).ljust(27) + " deleted")
    elif alterType == "mut":
        print(str(aligned1[x]).ljust(27) + " mutated to " + str(aligned2[x]))
    elif alterType == "timemut":
        print(str(aligned1[x]).ljust(27) + " mutated* to " + str(aligned2[x]))
    elif alterType == "time":
         print(str(aligned1[x]).ljust(27) + " preserved*.")
    #Asterisk * indicates temporal mutation.
